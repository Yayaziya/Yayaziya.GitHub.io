<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>巴基斯坦APT组织SideCopy针对印度的攻击活动</title>
      <link href="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/"/>
      <url>/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>SideCopy APT 来自于巴基斯坦，至少自 2019 年以来一直在运作，主要针对的是南亚国家，尤其是印度和阿富汗。它的名字来自它的感染链，它试图模仿 SideWinder APT 的感染链。据悉，该组织与透明部落（APT36）有相似之处，可能是透明部落的一个细分组织。</p><p>SideCopy APT 使用的诱饵通常是嵌入以下文件之一的存档文件：Lnk、Microsoft Publisher 或特洛伊木马应用程序。</p><p>这个组织经常通过用针对性的诱饵（这些诱饵是专门为特定受害者设计的）对政府或军事官员进行引诱，进而达到他们的目的（窃取敏感信息）。如该次分析的样本<em>NCERT-NCF-LTV-Vislzr-2022.zip</em>，解压缩后文件包含了一个通过扩展名PDF 文件进行混淆的恶意的lnk文件，诱饵是NCERT（印度国家教育研究与培训委员会）提供的名为“践行价值观，基层领导力的价值叙事”课程的课程，如下图所示</p><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208141701647.png" style="zoom:67%;"><h2 id="样本分析"><a href="#样本分析" class="headerlink" title="样本分析"></a>样本分析</h2><h3 id="1-初始感染媒介：lnk文件"><a href="#1-初始感染媒介：lnk文件" class="headerlink" title="1.初始感染媒介：lnk文件"></a>1.初始感染媒介：lnk文件</h3><p>NCERT-NCF-LTV-Vislzr-2022.pdf.lnk这个文件的目标是为获取固定url中的hta文件并通过本地C:\Windows\System32\mshta.exe 运行该css.hta文件。</p><h3 id="2-恶意脚本：css-hta文件"><a href="#2-恶意脚本：css-hta文件" class="headerlink" title="2.恶意脚本：css.hta文件"></a>2.恶意脚本：css.hta文件</h3><ul><li><p>hta文件包含两个经过base64编码的字符串。其中一个是反序列化的.NET模块，名为“hta.dll”。</p></li><li><p>hta文件第一部分是检查.NET的版本并创建一个C://ProgramData//IntelUpdate.js文件，写入以下内容</p><p><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208230736827.png"></p><p>这个脚本执行后会导致受害机2小时后关机，清楚运行mshta.exe 的痕迹。</p></li><li><p>hta文件第二部分调用WorkInProgress类的RealityShow方法，传入参数diva（一段数据）和NCERT-NCF-LTV-Vislzr-2022.pdf（释放文档名称）。</p></li></ul><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208143254123.png" style="zoom:50%;"><h3 id="3-dropper木马hta-dll"><a href="#3-dropper木马hta-dll" class="headerlink" title="3.dropper木马hta.dll"></a>3.dropper木马hta.dll</h3><p>该名为hta.dll的程序是一种下载器木马，经分析，它主要有以下几个方面的功能：</p><ul><li><p>调用函数RealityShow1()，主要功能为从https[:]//vedicwisdom.in/wp-content/uploads/2019/13/hwo/DISCHARGE-DRILL/css/获取hta脚本并运行</p><p><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208152729238.png"></p></li><li><p>调用RealityShow函数先解码和解压缩这个字符串并写入一个PDF文件中，然后打开”NCERT-NCF-LTV-Vislzr-2022.pdf“这个文件。</p><p><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208210234232.png"></p></li><li><p>接着RealityShow会调用getThridStrike函数从https[:]//iiieyehealth.com/fonts/times/files/css/获取hta并用本地mshta.exe运行；从https[:]//iiieyehealth.com/fonts/times/files/js/获取文件并更该文件名为duoApp.txt，将文件中的数据读并写入duoApp1.hta文件，然后运行hta文件。</p><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208153928657.png" style="zoom:67%;"></li></ul><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208154034192.png" style="zoom:67%;"><p>注：由于第三步中对应链接的payload失效，所以接下来的分析是根据带有截图的关于SideCopy分析的文章交叉分析的执行过程</p><h3 id="4-第二个恶意脚本：hta文件"><a href="#4-第二个恶意脚本：hta文件" class="headerlink" title="4.第二个恶意脚本：hta文件"></a>4.第二个恶意脚本：hta文件</h3><p>由第三步知，hta.dll文件运行得到第二阶段的hta文件。这个hta的文件主要功能有：</p><ul><li>通过注册表项检测系统中的.Net框架版本，决定后续释放的木马程序版本。</li><li>将嵌入的所有数据和已安装的防病毒产品信息通过 PinkAgain 函数传递给序列化名为“preBotHta.dll”的 .Net 模块</li></ul><h3 id="5-dropper木马：PreBotHta-dll"><a href="#5-dropper木马：PreBotHta-dll" class="headerlink" title="5.dropper木马：PreBotHta.dll"></a>5.dropper木马：PreBotHta.dll</h3><ul><li><p>  入口函数PinkAgain()会判断当前系统中安装的杀毒软件，然后根据杀毒软件的类型来决定释放文件的方式</p></li><li><p>调用activeDefender函数将 “Credwiz.exe” 从 system32/SysWOW64 文件复制到路径 “C:\ProgramData\文件夹\”，当它加载时会侧加载恶意文件Duser.dll</p></li><li><p>调用CopyExeAsTxt函数，CopyExeAsTxt会解码和解压传递进来的字符串然后在Statrtup目录释放一个名字为winstr.jpg的文件，然后将winstr.jpg重命名为winstr.exe（关于后面RAT的分析见这个<a href="http://blog.nsfocus.net/apt-sidecopy/">文档</a>）。</p><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208213505352.png" style="zoom:67%;"><img src="/2021/12/08/%E5%B7%B4%E5%9F%BA%E6%96%AF%E5%9D%A6APT%E7%BB%84%E7%BB%87SideCopy%E9%92%88%E5%AF%B9%E5%8D%B0%E5%BA%A6%E7%9A%84%E6%94%BB%E5%87%BB%E6%B4%BB%E5%8A%A8/image-20211208223006705.png" style="zoom:67%;"></li></ul><h3 id="6-恶意脚本：duoApp1-hta"><a href="#6-恶意脚本：duoApp1-hta" class="headerlink" title="6.恶意脚本：duoApp1.hta"></a>6.恶意脚本：duoApp1.hta</h3><ul><li><p>跟之前分析的hta文件功能差不多，即内存中释放并执行名为dropper木马，并将包含恶意程序的数据和一段反病毒程序列表字符串传递给该dropper木马。</p></li><li><p>dropper木马的主要功能是通过判断传入的反病毒产品列表，使用对应的方式将传入的数据保存并运行。</p></li><li><p>释放出 DUser.dll，bat批文件, exe文件，将系统文件credwiz.exe拷贝到C:\ProgramData\文件夹\credwiz.exe。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SideCopy APT 主要使用存档文件来针对垃圾邮件或鱼叉式网络钓鱼活动中的受害者。存档文件通常具有嵌入式 lnk、Office 或木马应用程序，用于调用 mshta 下载和执行 hta 文件。 hta 文件执行无文件负载执行以部署与此参与者关联的 RAT ，然后根据RAT从C2获取指令和传递搜集到的信息。</p><p>参考链接：</p><p><a href="http://blog.nsfocus.net/apt-sidecopy/">http://blog.nsfocus.net/apt-sidecopy/</a></p><p><a href="https://blog.malwarebytes.com/threat-intelligence/2021/12/sidecopy-apt-connecting-lures-to-victims-payloads-to-infrastructure/">https://blog.malwarebytes.com/threat-intelligence/2021/12/sidecopy-apt-connecting-lures-to-victims-payloads-to-infrastructure/</a></p><p><a href="https://paper.seebug.org/1721/">https://paper.seebug.org/1721/</a></p><p><a href="https://www.seqrite.com/documents/en/white-papers/Seqrite-WhitePaper-Operation-SideCopy.pdf">https://www.seqrite.com/documents/en/white-papers/Seqrite-WhitePaper-Operation-SideCopy.pdf</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 样本分析 </tag>
            
            <tag> APT </tag>
            
            <tag> SideCopy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PECompact壳及脱壳</title>
      <link href="/2021/11/29/PECompact%E5%A3%B3%E5%8F%8A%E8%84%B1%E5%A3%B3/"/>
      <url>/2021/11/29/PECompact%E5%A3%B3%E5%8F%8A%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="PECompact"><a href="#PECompact" class="headerlink" title="PECompact"></a>PECompact</h2><p>PECompact是一个商业壳，为性能和速度设计。手动脱PECompact壳跟UPX差不多，不过程序会产生几个异常，需要设置OD将异常传回程序。可以通过尾部跳转指令来寻找OEP。</p><p>异常发生时，OD停止运行，你可以使用下列方法，来决定是否将异常转到应用程序处理：</p><ul><li>Shift+F7 将进入异常</li><li>Shift+F8 将跳过异常</li><li>Shift+F9 将运行异常处理</li></ul><p>OD提供异常处理选项，如同所示，不过在分析时其实我们时可以忽视异常的，因为我们的目的并不是异常修复。</p><img src="/2021/11/29/PECompact%E5%A3%B3%E5%8F%8A%E8%84%B1%E5%A3%B3/1638190316(1).jpg" alt="" style="zoom: 50%;"><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>工具：OD，PEiD，Ollydump插件</p><ul><li>用PEid查看样本壳的类型为PECompact</li></ul><img src="/2021/11/29/PECompact%E5%A3%B3%E5%8F%8A%E8%84%B1%E5%A3%B3/1638190800(1).jpg" style="zoom:67%;"><ul><li>OD打开样本–EntryPoint在0x405130处，在此处有个无条件跳转，往下看，0x405138和0x405139处的指令分别是PUSHFD、PUSHAD，这些指令用来保存寄存器和标志，我们可以推测到，代码结束处肯定会有POPAD和POPFD指令。所以我们可以设置一个断点来尝试发现原始OEP。再往下看0x40513A处有个CALL调用，寄存器窗口ESP处值为0019FF50，也就是说栈地址是0019FF50，我们在此处设置一个硬件断点，右键点击Follow In Dump，我们在内存转储窗口可看到0019FF50地址处存储的内容，并在第一个元素处点击BreakPoint&gt;&gt;Memory on Access，运行程序，出现了一个异常，我们再次设置一个断点，点击BreakPoint&gt;&gt;HW ,on Acess&gt;&gt;Dword,启动程序，触发断点，如图所示：</li></ul><img src="/2021/11/29/PECompact%E5%A3%B3%E5%8F%8A%E8%84%B1%E5%A3%B3/1638192882.png" alt="" style="zoom: 25%;"><p>我们可以看到RETN 指令跳转至另一个位置运行，这可能是尾部跳转，我们单步看这个指令会跳转至什么地方。跳转至0x401577处，此处就是OEP处，我们鼠标点击Plugins&gt;&gt;Ollydump&gt;&gt;Dump Process&gt;&gt;Get EIP As EOP&gt;&gt;Dump，将脱壳后的原始可执行文件存储在硬盘上。</p><ul><li><p>PEiD查看是否脱壳</p><img src="/2021/11/29/PECompact%E5%A3%B3%E5%8F%8A%E8%84%B1%E5%A3%B3/1638193627(1).png" style="zoom: 67%;"></li></ul><p>我们可以看到脱壳成功</p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UPX壳及使用OllyDbg脱壳</title>
      <link href="/2021/11/27/UPX%E5%A3%B3%E5%8F%8A%E4%BD%BF%E7%94%A8OllyDbg%E8%84%B1%E5%A3%B3/"/>
      <url>/2021/11/27/UPX%E5%A3%B3%E5%8F%8A%E4%BD%BF%E7%94%A8OllyDbg%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="UPX壳"><a href="#UPX壳" class="headerlink" title="UPX壳"></a>UPX壳</h2><p>壳一般分为两类，一类是加密壳，一类是压缩壳。UPX壳属于是压缩壳。</p><p>UPX压缩原理就是将程序压缩，并在原先的程序之前再加入一段代码。将压缩后的代码执行时，加入的代码将原先的代码加载到内存中，并在加入代码执行完后跳转至原先代码的OEP（程序入口处）</p><h2 id="UPX脱壳步骤"><a href="#UPX脱壳步骤" class="headerlink" title="UPX脱壳步骤"></a>UPX脱壳步骤</h2><p>工具：OllyDbg，插件Ollydump，PEiD</p><p>1.寻找原始OEP</p><p>最简单的手动查找OEP就是寻找尾部跳转指令，这条指令就是插入代码的最后一条指令跳转至OEP。通常情况下它是jmp指令。通常尾部跳转指令是一串无效指令前的有效指令的最后一条指令。OD打开加壳后的程序我们可以看到：</p><p><img src="/2021/11/27/UPX%E5%A3%B3%E5%8F%8A%E4%BD%BF%E7%94%A8OllyDbg%E8%84%B1%E5%A3%B3/1638025945.png"></p><p>找到OEP后我们在尾部跳转指令处下断点，F9运行至断点处，F7进入OEP</p><p>2.dump内存到文件（将内存中的数据或代码转储至本地）</p><p>点击插件&gt;&gt;插件Ollydump&gt;&gt;Dump process&gt;&gt;Dump</p><p>注意：将Entry Point 改为OEP地址</p><p><img src="/2021/11/27/UPX%E5%A3%B3%E5%8F%8A%E4%BD%BF%E7%94%A8OllyDbg%E8%84%B1%E5%A3%B3/1638026860(1).png"></p><p>3.可用PEiD查看是否已脱壳</p><p><img src="/2021/11/27/UPX%E5%A3%B3%E5%8F%8A%E4%BD%BF%E7%94%A8OllyDbg%E8%84%B1%E5%A3%B3/1638027157(1).png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加壳与脱壳</title>
      <link href="/2021/11/27/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/"/>
      <url>/2021/11/27/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="加壳与脱壳"><a href="#加壳与脱壳" class="headerlink" title="加壳与脱壳"></a>加壳与脱壳</h1><h2 id="一、加壳"><a href="#一、加壳" class="headerlink" title="一、加壳"></a>一、加壳</h2><p>打包程序，也称为加壳器。所有的加壳器是将一个可执行文件输入，再输出一个新的可执行文件。被加壳的可执行文件经过压缩、加密或者其他转换，目的是使他们难以识别，难以被逆向工程分析。</p><h3 id="1-脱壳存根"><a href="#1-脱壳存根" class="headerlink" title="1.脱壳存根"></a>1.脱壳存根</h3><p>未加壳的可执行程序是由操作系统加载，而加壳后的可执行程序是脱壳存根在操作系统中加载，它负责加载原始程序。</p><p>脱壳存根执行以下几个操作：</p><ul><li>将原始程序脱壳到内存中</li><li>解析原始可执行文件的所有导入函数</li><li>将可执行程序转移到原始的程序入口点</li></ul><h3 id="2-加载可执行程序"><a href="#2-加载可执行程序" class="headerlink" title="2.加载可执行程序"></a>2.加载可执行程序</h3><p>当加载一个标准的可执行文件的时候，加载器首先会读取硬盘上可执行文件的PE头部信息，然后根据PE头部信息为可执行文件的各个节分配内存。然后，加载器将这些节复制到分配的内存空间中。</p><p>加壳后的可执行文件会组成PE头部，会让加载器为它的节分配空间。脱壳存根会脱壳每个节的代码，并将他们复制到分配的内存中。</p><h3 id="3-解析导入函数表"><a href="#3-解析导入函数表" class="headerlink" title="3.解析导入函数表"></a>3.解析导入函数表</h3><p>Windows加载器不能读取被加壳可执行文件的导入函数信息，而是由脱壳存根负责解析导入函数。</p><p>脱壳存根最常使用的函数是LoadLibrary和GetProcAddress这两个函数。脱壳存根在解析出原始的可执行文件之后，才会读取原始可执行文件的函数导入信息。为了将DLL加载到内存中，脱壳存根导入LoadLibrary函数导入每个库，并用GetProcAdress函数来获取每个函数的地址。</p><h3 id="4-尾部跳转"><a href="#4-尾部跳转" class="headerlink" title="4.尾部跳转"></a>4.尾部跳转</h3><p>脱壳存根一旦完成脱壳，就必须转到OEP运行。而转到OEP的指令叫做尾部跳转指令，通常是Jump指令。</p><h3 id="5-脱壳过程"><a href="#5-脱壳过程" class="headerlink" title="5.脱壳过程"></a>5.脱壳过程</h3><p><img src="/2021/11/27/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/1638002764.jpg"></p><p><img src="/2021/11/27/%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/1638173270(1).jpg"></p><h2 id="二、识别加壳程序"><a href="#二、识别加壳程序" class="headerlink" title="二、识别加壳程序"></a>二、识别加壳程序</h2><h3 id="1-加壳程序的标识"><a href="#1-加壳程序的标识" class="headerlink" title="1.加壳程序的标识"></a>1.加壳程序的标识</h3><ul><li>程序中的导入函数很少，如果导入函数只有LoadLibrary和GetProcAddress时要更加注意。</li><li>使用IDA打开程序，自动分析只有少量代码被识别。</li><li>使用OllyDbg打开程序，会有程序可能被加壳的警告。</li><li>程序的节名中包含某种加壳器的标识，如UPX0</li><li>程序拥有不正常的节大小</li><li>加壳探测工具，如PEiD</li></ul><h3 id="2-脱壳选项"><a href="#2-脱壳选项" class="headerlink" title="2.脱壳选项"></a>2.脱壳选项</h3><p>脱壳有三种选项：自动静态脱壳，自动动态脱壳和手动动态脱壳</p><h4 id="2-1-自动脱壳"><a href="#2-1-自动脱壳" class="headerlink" title="2.1.自动脱壳"></a>2.1.自动脱壳</h4><p>自动静态脱壳程序解压缩或者解密一个可执行程序。自动静态脱壳仅仅针对的是某个壳，对于那种阻碍分析的壳是无用的。</p><p>自动的动态脱壳程序运行可执行文件，所以需要在安全的环境下运行。它让脱壳存根脱出原始的可执行文件。一旦原始的可执行文件被脱壳，它将被写入硬盘，然后脱壳程序重构导入表。</p><h4 id="2-2-手动脱壳"><a href="#2-2-手动脱壳" class="headerlink" title="2.2.手动脱壳"></a>2.2.手动脱壳</h4><p>有两种手动脱壳的方法：</p><ul><li>找到加壳的算法，然后编写一个程序逆向运行它。</li><li>运行脱壳程序，让脱壳存根帮你，从内存中转储出进程，手动修改PE头部，保持程序的完整。</li></ul><p>脱壳后，我们需找到OEP：</p><ul><li>手动查找OEP：找到尾部跳转指令，然后在尾部跳转指令处下断点，运行至此处，之后转储至硬盘上。</li></ul><p>找尾部跳转指令的方法：</p><ul><li><p>在OD中，浏览反汇编码至尾部，且尾部链接至很远的地址处，代码尾部之后的代码是一串无意义的码。有以上特征差不多就是尾部跳转指令。</p></li><li><p>在栈上设置断点，反汇编中大多函数开始指令为push，在栈中记录第一个入栈地址，在此处设置断点。当pop获取那个地址时，会命中断点。一般尾部跳转指令后就是pop指令（请看这个*<a href="https://www.52pojie.cn/thread-394116-1-1.html">文档</a>*）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客中图片插入及插入失败解决</title>
      <link href="/2021/11/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo插入图片"><a href="#Hexo插入图片" class="headerlink" title="Hexo插入图片"></a>Hexo插入图片</h2><p>Hexo是一个微博框架，它将编辑的md文件（<code>在E:\study\blog\source\_posts路径下</code>）生成html文件，放在以年月日做文件目录的文件下，如<code>E:\study\blog\hexo\public\2021\11</code>。</p><h3 id="1-Hexo配置文件设置"><a href="#1-Hexo配置文件设置" class="headerlink" title="1.Hexo配置文件设置"></a>1.Hexo配置文件设置</h3><p>将配置文件_config.yml里面的post_asset_folder配置改为为true。这个更改其实就是你在用命令<code>hexo new "文件名称"</code>时在<code>/source/_post</code>目录下时除了生成一个md文件，还会生成和md文件相同文件名称的文件夹，用来储存文件中所需的资源，如图片，附件等。</p><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h3><p>你需要安装一个图片路径转换的插件，这个插件名字是**<a href="https://github.com/CodeFalling/hexo-asset-image">hexo-asset-image</a>**，用以下命令</p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></p><h3 id="3-typora中图像设置"><a href="#3-typora中图像设置" class="headerlink" title="3.typora中图像设置"></a>3.typora中图像设置</h3><p>在<code>偏好设置</code>中<code>图像</code>设置，如下图</p><img src="/2021/11/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/1638450458(1).png" style="zoom:50%;"><h3 id="4-插入图片"><a href="#4-插入图片" class="headerlink" title="4.插入图片"></a>4.插入图片</h3><ul><li>我们将一张图片粘贴至Typ时应该是这样的，如下图</li></ul><p><img src="/2021/11/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20211202212837909.png"></p><ul><li>html文件里面的图片是指定绝对路径的，如下图</li></ul><p><img src="/2021/11/26/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5%E5%A4%B1%E8%B4%A5-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/image-20211202212110041.png"></p><ul><li><p>我们在md文件中的图片是相对路径<code>./${filename}</code>，通过命令<code>hexo g</code>生成html时是将相对路径转换成了绝对路径。</p></li><li><p>图片插入成功</p><h3 id="5-问题"><a href="#5-问题" class="headerlink" title="5.问题"></a>5.问题</h3><p>按照上面的步骤，图片插入成功，但是<em><strong>如果出现问题，肯定是图片途径的问题</strong></em>，请看这个<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">文档</a>。我之前图片插入不成功，出现的问题跟这个文档一样，是图片路径的错误。!!!但是我将插件重新安装后，图片复制粘贴后更改粘贴后的路径反而出现了图片路径重复的问题，直接粘贴保存生成（hexo g）后查看，图片插入是成功的，所以如果你插入出现了问题，卸载掉安装的插件重新安装，看看直接复制粘贴看插入图片是否成功，如果不成功，且出现路径重复的问题，那么这个<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">文档</a>说的一清二楚了。</p></li></ul><p>参考链接：</p><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">https://blog.csdn.net/m0_43401436/article/details/107191688</a></p><p><a href="http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/">http://etrd.org/2017/01/23/hexo%E4%B8%AD%E5%AE%8C%E7%BE%8E%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git报错--errno 10054 报错解决</title>
      <link href="/2021/11/26/Git%E6%8A%A5%E9%94%99-errno-10054-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
      <url>/2021/11/26/Git%E6%8A%A5%E9%94%99-errno-10054-%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><strong>打开Git命令页面，执行git命令脚本：修改设置，解除ssl验证</strong></p><p><code>git config --global http.sslVerify "false"</code></p><p>之后，再次输入<code>hexo d</code>即可`</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+Github搭建个人博客</title>
      <link href="/2021/11/21/hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/11/21/hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-Github搭建个人博客"><a href="#hexo-Github搭建个人博客" class="headerlink" title="hexo+Github搭建个人博客"></a>hexo+Github搭建个人博客</h1><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="1-下载并安装node-js"><a href="#1-下载并安装node-js" class="headerlink" title="1.下载并安装node.js"></a>1.下载并安装node.js</h3><p>官网下载并安装：<a href="https://nodejs.org/en">https://nodejs.org/en</a>    记得下载最新版本，我下载的版本不是最新的，后面使用的时候一直报错，找了很久的原因，最后发现是版本低的原因，浪费了很多时间。</p><h3 id="2-下载并安装git"><a href="#2-下载并安装git" class="headerlink" title="2.下载并安装git"></a>2.下载并安装git</h3><p>官网下载并安装：<a href="http://git-scm.com/download/win">http://git-scm.com/download/win</a>    </p><h3 id="3-安装cnpm"><a href="#3-安装cnpm" class="headerlink" title="3.安装cnpm"></a>3.安装cnpm</h3><p>命令：npm install -g cnpm –registry==<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> </p><h3 id="4-配置github"><a href="#4-配置github" class="headerlink" title="4.配置github"></a>4.配置github</h3><ul><li><p>在github上创建仓库</p></li><li><p>新建一个名为用户名+.github.io的仓库</p></li><li><p>创建成功后，点击setting，找到Github Pages，选择一个主题，之后，你的博客页面（https://用户名.github.io/）就创建成功</p><p><img src="/2021/11/21/hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png"></p></li></ul><h3 id="5-hexo安装"><a href="#5-hexo安装" class="headerlink" title="5.hexo安装"></a>5.hexo安装</h3><ul><li><p>创建文件夹：在你的某个磁盘中创建一个文件夹用来存放自己的博客文件，创建完成后右键点击Git Bash Here，打开git控制台。</p></li><li><p>下载安装：控制台中输入命令&gt;&gt;npm i hexo-cli -g</p></li><li><p>初始化：输入命令&gt;&gt;hexo init</p></li><li><p>安装必备组件：输入命令&gt;&gt;npm install</p></li><li><p>生成静态网页：输入命令&gt;&gt;hexo g</p></li><li><p>打开本地预览服务：输入命令&gt;&gt;hexo s</p></li><li><p> 打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到初始页面</p></li></ul><p>  <img src="/2021/11/21/hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8-16376690935336.jpg"></p><ul><li>ctrl+c 关闭本地服务器</li></ul><h3 id="6-连接Github与本地"><a href="#6-连接Github与本地" class="headerlink" title="6.连接Github与本地"></a>6.连接Github与本地</h3><p>打开git bash，然后输入以下命令：</p><ul><li> git config –global user.name “你的用户名”</li><li> git config –global user.email “你注册邮箱”</li></ul><h3 id="7-将博客部署到-github-个人主页上"><a href="#7-将博客部署到-github-个人主页上" class="headerlink" title="7.将博客部署到 github 个人主页上"></a>7.将博客部署到 github 个人主页上</h3><ul><li>安装hexo-deployer-git 插件</li></ul><p>​    安装命令： npm install hexo-deployer-git –save  </p><ul><li>在你建的文件夹目录下找到 _config.yml 文件并打开, 在文件末尾添加以下内容：</li></ul><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: https://github.com/你的用户名/你的用户名.github.io       branch: master  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：注意你的分支是哪个分支，我建的仓库的分支是main分支,所以分支处我应该填写的是main，而不是master。如果你的也是main,那也要填写main,不然推送的后你会发现你的博客页面没发生变化。</p><h3 id="8-配置SSH免密登录"><a href="#8-配置SSH免密登录" class="headerlink" title="8.配置SSH免密登录"></a>8.配置SSH免密登录</h3><p>首先，我们要知道为什么配置这个东西，那就是你往git上提交代码的时候，你必须拥有git的权限，但是用用户名和密码较为不安全，所以用ssh key来解决本地和服务器的连接问题。</p><p>操作如下：</p><ul><li><p>命令：ssh-keygen -t rsa -C 你的github邮件地址 ，回车后再三次回车，成功后会生成  /user/用户/.ssh  文件。</p><p><img src="/2021/11/21/hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2-16376690444965.png"></p></li><li><p>打开github，进入个人设置 &gt;&gt; SSH and GPG keys &gt;&gt; New SSH key，名字随意，将.ssh文件夹下的id_rsa.pub文件中的内容复制粘贴进去，保存即可，我们的公钥就添加成功了。</p></li><li><p>检测设置是否成功：输入命令：  $ ssh -T <a href="mailto:git@github.com">git@github.com</a> 回车，提示Are you sure you want to continue connecting (yes/no)?，输入yes，之后会出现–Hi 你的用户名! You’ve successfully authenticated, but GitHub does not provide shell access.（出现这个信息说明SSH已配置成功）</p></li></ul><h2 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h2><h3 id="1-寻找主题"><a href="#1-寻找主题" class="headerlink" title="1.寻找主题"></a>1.寻找主题</h3><ul><li><a href="https://hexo.io/themes/">打开这个网页</a>，选择你喜欢的主题，然后点击主题名，即可跳转至github上。</li></ul><h3 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2.下载主题"></a>2.下载主题</h3><ul><li><p>进入hexo安装创建的目录，右键点击Git Bash Here。</p></li><li><p>输入命令&gt;&gt;git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git">https://github.com/blinkfox/hexo-theme-matery.git</a>  themes/主题名称 </p></li><li><p>注意：<strong>第二步命令中https这个链接是你自己的主题链接</strong></p></li><li><p>命令执行成功后当前目录下会生成一个theme文件，这个文件下存放博客主题</p><p><img src="/2021/11/21/hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png"></p></li></ul><h3 id="3-使用主题"><a href="#3-使用主题" class="headerlink" title="3.使用主题"></a>3.使用主题</h3><ul><li>在hexokinase根目录下找到_config.yml文件，在里面找到theme: landscape改为theme: 你的主题名称  </li><li>右键点击Git Bash Here输入命令&gt;&gt;hexo g，之后输入命令&gt;&gt;hexo s打开服务器本地。</li><li>浏览器输入localhost:4000查看效果</li><li>输入命令hexo d推送至git</li></ul><h3 id="4-修改主题"><a href="#4-修改主题" class="headerlink" title="4.修改主题"></a>4.修改主题</h3><ul><li><p>后期想要修改主题的话，用这个<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">文档</a></p></li><li><p>修改后将文件关闭，输入命令hexo g和hexo s用来生成和本地预览，设置成功后就输入命令hexo d推送至git。</p></li><li><p>浏览器打开https://你的用户名.github.io/，即可看到更改后的样子。</p></li></ul><h2 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h2><ul><li><p>在根目录下右键打开git bash，之后输入命令&gt;&gt;npm i hexo-deployer-git</p></li><li><p>新建一篇文章，输入&gt;&gt;hexo new post “文章名”</p></li><li><p>打开\source\_posts目录，可以看到你创建了一个md文件</p></li><li><p>编写markdown文件（Typora–一款Markdown编辑器，保存后直接为md格式，Markdown中点击导入就可以，编写md文件请看这个<a href="https://cloud.tencent.com/developer/article/1461211">文档</a>）。</p></li><li><p>hexo中插入图片请看这个<a href="https://juejin.cn/post/6882619951857811469">文档</a></p></li><li><p>根目录下右键打开git bash，输入hexo g生成，输入hexo s本地预览，成功后输入hexo d推送</p><p><strong>参考链接：</strong></p><p><a href="https://www.bilibili.com/read/cv12633102">https://www.bilibili.com/read/cv12633102</a></p><p><a href="https://zhuanlan.zhihu.com/p/35668237">https://zhuanlan.zhihu.com/p/35668237</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/20/hello-world/"/>
      <url>/2021/11/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
